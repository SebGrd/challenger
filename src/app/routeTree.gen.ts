/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ChallengesIndexImport } from './routes/challenges/index'
import { Route as ChallengesChallengeGroupImport } from './routes/challenges/$challengeGroup'

// Create Virtual Routes

const TitlesLazyImport = createFileRoute('/titles')()
const LiveLazyImport = createFileRoute('/live')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TitlesLazyRoute = TitlesLazyImport.update({
  id: '/titles',
  path: '/titles',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/titles.lazy').then((d) => d.Route))

const LiveLazyRoute = LiveLazyImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/live.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ChallengesIndexRoute = ChallengesIndexImport.update({
  id: '/challenges/',
  path: '/challenges/',
  getParentRoute: () => rootRoute,
} as any)

const ChallengesChallengeGroupRoute = ChallengesChallengeGroupImport.update({
  id: '/challenges/$challengeGroup',
  path: '/challenges/$challengeGroup',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/live': {
      id: '/live'
      path: '/live'
      fullPath: '/live'
      preLoaderRoute: typeof LiveLazyImport
      parentRoute: typeof rootRoute
    }
    '/titles': {
      id: '/titles'
      path: '/titles'
      fullPath: '/titles'
      preLoaderRoute: typeof TitlesLazyImport
      parentRoute: typeof rootRoute
    }
    '/challenges/$challengeGroup': {
      id: '/challenges/$challengeGroup'
      path: '/challenges/$challengeGroup'
      fullPath: '/challenges/$challengeGroup'
      preLoaderRoute: typeof ChallengesChallengeGroupImport
      parentRoute: typeof rootRoute
    }
    '/challenges/': {
      id: '/challenges/'
      path: '/challenges'
      fullPath: '/challenges'
      preLoaderRoute: typeof ChallengesIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/live': typeof LiveLazyRoute
  '/titles': typeof TitlesLazyRoute
  '/challenges/$challengeGroup': typeof ChallengesChallengeGroupRoute
  '/challenges': typeof ChallengesIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/live': typeof LiveLazyRoute
  '/titles': typeof TitlesLazyRoute
  '/challenges/$challengeGroup': typeof ChallengesChallengeGroupRoute
  '/challenges': typeof ChallengesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/live': typeof LiveLazyRoute
  '/titles': typeof TitlesLazyRoute
  '/challenges/$challengeGroup': typeof ChallengesChallengeGroupRoute
  '/challenges/': typeof ChallengesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/live'
    | '/titles'
    | '/challenges/$challengeGroup'
    | '/challenges'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/live' | '/titles' | '/challenges/$challengeGroup' | '/challenges'
  id:
    | '__root__'
    | '/'
    | '/live'
    | '/titles'
    | '/challenges/$challengeGroup'
    | '/challenges/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LiveLazyRoute: typeof LiveLazyRoute
  TitlesLazyRoute: typeof TitlesLazyRoute
  ChallengesChallengeGroupRoute: typeof ChallengesChallengeGroupRoute
  ChallengesIndexRoute: typeof ChallengesIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LiveLazyRoute: LiveLazyRoute,
  TitlesLazyRoute: TitlesLazyRoute,
  ChallengesChallengeGroupRoute: ChallengesChallengeGroupRoute,
  ChallengesIndexRoute: ChallengesIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/live",
        "/titles",
        "/challenges/$challengeGroup",
        "/challenges/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/live": {
      "filePath": "live.lazy.tsx"
    },
    "/titles": {
      "filePath": "titles.lazy.tsx"
    },
    "/challenges/$challengeGroup": {
      "filePath": "challenges/$challengeGroup.tsx"
    },
    "/challenges/": {
      "filePath": "challenges/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
